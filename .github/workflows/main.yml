name: Taski workflow
on:
  push:
    branches: [ main ]
concurrency:
  group: taski-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_DB: taski
          POSTGRES_USER: taski_user
          POSTGRES_PASSWORD: taski_password
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }
      - run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - env:
          POSTGRES_DB: taski
          POSTGRES_USER: taski_user
          POSTGRES_PASSWORD: taski_password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_backend:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: pavellchemakin/taski_backend:latest
          no-cache: true

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: cd frontend && npm ci
      - run: cd frontend && npm run test
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: pavellchemakin/taski_frontend:latest
          no-cache: true

  build_gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./gateway
          push: true
          tags: pavellchemakin/taski_gateway:latest
          no-cache: true

  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euxo pipefail
            sudo flock -w 900 /var/lock/deploy.lock bash -lc '
              mkdir -p ~/taski && cd ~/taski
              sudo docker compose -f docker-compose.production.yml \
                down --remove-orphans || true
              sudo fuser -k 9001/tcp || true
              sudo docker container prune -f || true
              sudo docker image prune -f || true
              sudo docker network prune -f || true
            '

  deploy:
    runs-on: ubuntu-latest
    needs:
      - cleanup
      - build_backend
      - build_frontend
      - build_gateway
    steps:
      - uses: actions/checkout@v3
      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "taski"
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euxo pipefail
            sudo flock -w 900 /var/lock/deploy.lock bash -lc '
              cd ~/taski
              sudo docker compose -f docker-compose.production.yml pull
              sudo docker compose -f docker-compose.production.yml \
                down --remove-orphans || true
              sudo docker compose -f docker-compose.production.yml up -d \
                --force-recreate --remove-orphans || true

              sudo docker compose -f docker-compose.production.yml exec -T db \
                bash -lc "until pg_isready -U \"$POSTGRES_USER\" \
                -d \"$POSTGRES_DB\"; do sleep 1; done"

              sudo docker compose -f docker-compose.production.yml exec -T backend \
                python manage.py migrate
              sudo docker compose -f docker-compose.production.yml exec -T backend \
                python manage.py collectstatic --noinput
              sudo docker compose -f docker-compose.production.yml exec -T backend \
                bash -lc "rm -rf /backend_static/* && cp -r \
                /app/collected_static/. /backend_static/"

              sudo docker compose -f docker-compose.production.yml exec -T gateway \
                sh -lc "for i in \$(seq 1 60); do \
                wget -qO- http://frontend:9000/ >/dev/null 2>&1 && exit 0 \
                || sleep 1; done; exit 1"

              curl -sfI http://127.0.0.1:9001/ >/dev/null
            '

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Taski деплой выполнен
